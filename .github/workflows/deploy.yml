name: Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  full-validation:
    name: Complete Validation Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Complete test suite
        run: npm run test:all
        
      - name: Performance benchmarks
        run: npm run test:performance
        
      - name: Security validation
        run: npm run test:security
        
      - name: Tech debt avoidance check
        run: npm run test:tech-debt-avoided

  build-and-push:
    name: Build & Push Container Images  
    runs-on: ubuntu-latest
    needs: full-validation
    permissions:
      contents: read
      packages: write
      
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:  
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-coolify:
    name: Deploy to Coolify Cloud
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy via Coolify webhook
        run: |
          response=$(curl -s -w "%{http_code}" -X POST "${{ secrets.COOLIFY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
            -d '{
              "branch": "main",
              "commit": "${{ github.sha }}",
              "images": {
                "frontend": "${{ needs.build-and-push.outputs.frontend-image }}",
                "backend": "${{ needs.build-and-push.outputs.backend-image }}"
              }
            }')
          
          http_code=$(echo "$response" | tail -c 4)
          body=$(echo "$response" | head -c -4)
          
          if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
            echo "✅ Deployment initiated successfully"
            echo "Response: $body"
          else
            echo "❌ Deployment failed with HTTP $http_code"
            echo "Response: $body"
            exit 1
          fi
          
      - name: Wait for deployment to complete
        run: |
          for i in {1..30}; do
            echo "Checking deployment status (attempt $i/30)..."
            
            # Check if health endpoint responds
            if curl -f -s "${{ secrets.PRODUCTION_URL }}/health" > /dev/null; then
              echo "✅ Deployment completed successfully"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Deployment timeout - health check failed"
              exit 1
            fi
            
            sleep 30
          done

  post-deployment-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-to-coolify
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Production smoke tests
        run: npm run test:smoke:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: Production health checks
        run: npm run test:health:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: SSL certificate validation
        run: npm run test:ssl:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: Production performance validation
        run: npm run test:performance:prod
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: Integration validation
        run: npm run test:integration:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-to-coolify, post-deployment-validation]
    if: always()
    
    steps:
      - name: Notify Discord on success
        if: needs.deploy-to-coolify.result == 'success' && needs.post-deployment-validation.result == 'success'
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "🚀 Deployment Successful",
                "description": "Minecraft Marketplace deployed successfully to production",
                "color": 3066993,
                "fields": [
                  {
                    "name": "Commit",
                    "value": "${{ github.sha }}",
                    "inline": true
                  },
                  {
                    "name": "Author", 
                    "value": "${{ github.actor }}",
                    "inline": true
                  },
                  {
                    "name": "URL",
                    "value": "${{ secrets.PRODUCTION_URL }}",
                    "inline": false
                  }
                ],
                "timestamp": "${{ github.event.head_commit.timestamp }}"
              }]
            }'
            
      - name: Notify Discord on failure
        if: needs.deploy-to-coolify.result == 'failure' || needs.post-deployment-validation.result == 'failure'
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "❌ Deployment Failed",
                "description": "Minecraft Marketplace deployment to production failed",
                "color": 15158332,
                "fields": [
                  {
                    "name": "Commit",
                    "value": "${{ github.sha }}",
                    "inline": true
                  },
                  {
                    "name": "Author",
                    "value": "${{ github.actor }}",
                    "inline": true
                  },
                  {
                    "name": "Failed Job",
                    "value": "${{ needs.deploy-to-coolify.result == 'failure' && 'Deployment' || 'Post-Deployment Validation' }}",
                    "inline": false
                  }
                ],
                "timestamp": "${{ github.event.head_commit.timestamp }}"
              }]
            }'

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-to-coolify, post-deployment-validation]
    if: always()
    
    steps:
      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-to-coolify.result }}" == "success" && \
                "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
            echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **URL**: ${{ secrets.PRODUCTION_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "👤 **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Check**: Review failed jobs above" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "👤 **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          fi