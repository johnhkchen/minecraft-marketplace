# Minecraft Marketplace - nginx Development Reverse Proxy
# Single entry point for all services in development mode

events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Development-friendly upstream servers (Docker host gateway)
    upstream frontend {
        server host.docker.internal:7411;  # Docker host gateway
    }

    upstream backend {
        server host.docker.internal:7412;  # Docker host gateway
    }

    upstream postgrest {
        server postgrest:3000;
    }

    # Main server block - Development entry point
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Frontend routes (Astro SSR with hot reload)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for Astro hot reload
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Development timeouts (longer for debugging)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Backend API routes (Hono on port 7412)
        location /api/v1/ {
            proxy_pass http://backend/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Development timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Backend health check
        location /api/v1/health {
            proxy_pass http://backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            access_log off;
        }

        # Database API routes (PostgREST on port 7413)
        location /api/data/ {
            proxy_pass http://postgrest/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # PostgREST specific headers
            proxy_set_header Accept-Profile public;
            proxy_set_header Content-Profile public;
        }

        # Direct PostgREST access for development
        location /postgrest/ {
            proxy_pass http://postgrest/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API Documentation (PostgREST OpenAPI)
        location /docs {
            proxy_pass http://postgrest/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Development status endpoint
        location /status {
            access_log off;
            return 200 'üèóÔ∏è Minecraft Marketplace - Development Mode\n\nStatus: ONLINE ‚úÖ (Development)\nEntry Point: http://localhost:7410\nServices:\n  - Frontend (Astro+Svelte): http://localhost:7411\n  - Backend (Hono): http://localhost:7412  \n  - Database API (PostgREST): http://localhost:7413\n  - Database (PostgreSQL): localhost:7414\n  - Cache (Valkey): localhost:7415\n\nTime: $time_iso8601\nConnections: $connections_active\n\nüåê Routes:\n  / - Homepage (Astro SSR)\n  /api/v1/ - Backend API (Hono)\n  /api/data/ - Database API (PostgREST)\n  /docs - API Documentation\n  /status - This status page\n\nüíé Ready for diamond trading!';
            add_header Content-Type text/plain;
        }

        # Health check endpoints
        location ~ ^/(health|api/health)$ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            access_log off;
        }

        # Static assets
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            expires 1h; # Shorter cache for development
            add_header Cache-Control "public";
            
            # Add CORS for font files
            add_header Access-Control-Allow-Origin "*";
        }

        # Favicon
        location /favicon.ico {
            proxy_pass http://frontend/favicon.ico;
            expires 1h;
            add_header Cache-Control "public";
            access_log off;
        }
    }

    # Health check server (internal)
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}